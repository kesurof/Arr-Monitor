#!/bin/bash

# Script d'installation Arr Monitor (Surveillance Sonarr/Radarr)
set -euo pipefail

# Configuration du projet
GITHUB_REPO="kesurof/Arr-Monitor"
GITHUB_RAW_URL="https://raw.githubusercontent.com/$GITHUB_REPO/main"

# Gestion des param√®tres
FORCE_INSTALL=false
for arg in "$@"; do
    case $arg in
        --update)
            FORCE_INSTALL=true
            shift
            ;;
        *)
            ;;
    esac
done

echo "üöÄ Installation Arr Monitor - Surveillance Sonarr/Radarr"
echo ""
echo "üìÇ Ce script va :"
echo "   ‚Ä¢ T√©l√©charger les fichiers depuis GitHub"
echo "   ‚Ä¢ Les installer dans un r√©pertoire de destination"
echo "   ‚Ä¢ Cr√©er un environnement Python virtuel"
echo "   ‚Ä¢ Configurer l'application de mani√®re interactive"
echo ""
echo "üí° Utilisation :"
echo "   curl -sL https://raw.githubusercontent.com/$GITHUB_REPO/main/install-arr.sh | bash"
echo ""

# V√©rification des pr√©requis
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 n'est pas install√©. Veuillez l'installer avant de continuer."
    exit 1
fi

if ! command -v pip3 &> /dev/null; then
    echo "‚ùå pip3 n'est pas install√©. Veuillez l'installer avant de continuer."
    exit 1
fi

if ! command -v curl &> /dev/null; then
    echo "‚ùå curl n'est pas install√©. Veuillez l'installer avant de continuer."
    exit 1
fi

# Demander l'emplacement pour l'installation
echo ""
if [ "$FORCE_INSTALL" = true ]; then
    # Mode non-interactif pour --update
    SCRIPTS_DIR="/home/$USER/scripts"
    echo "üìÅ Mode mise √† jour : utilisation du r√©pertoire par d√©faut"
else
    read -p "üìÅ R√©pertoire d'installation des scripts [/home/$USER/scripts] : " SCRIPTS_DIR
fi
SCRIPTS_DIR=${SCRIPTS_DIR:-/home/$USER/scripts}

# R√©pertoire d'installation final
INSTALL_DIR="$SCRIPTS_DIR/Arr-Monitor"
echo "üìÅ Installation dans : $INSTALL_DIR"

# D√©terminer le mode d'installation
INSTALL_MODE=""
if [ -f "$(pwd)/arr-monitor.py" ] && [ -f "$(pwd)/requirements.txt" ] && [ -f "$(pwd)/config.yaml" ]; then
    # Mode local : fichiers pr√©sents dans le r√©pertoire courant
    SOURCE_DIR="$(pwd)"
    INSTALL_MODE="local"
    echo "üìã Mode installation : LOCAL (fichiers d√©tect√©s dans $(pwd))"
else
    # Mode distant : t√©l√©chargement depuis GitHub
    INSTALL_MODE="remote"
    echo "üìã Mode installation : DISTANT (t√©l√©chargement depuis GitHub)"
fi

# Cr√©ation du r√©pertoire d'installation
IS_UPDATE=false
if [ -d "$INSTALL_DIR" ]; then
    echo "üìÇ Installation existante d√©tect√©e. Mode mise √† jour activ√©."
    IS_UPDATE=true
    
    # Sauvegarde de la configuration existante si elle existe
    if [ -f "$INSTALL_DIR/config/config.yaml.local" ]; then
        BACKUP_FILE="$INSTALL_DIR/config/config.yaml.local.backup.$(date +%Y%m%d_%H%M%S)"
        echo "üíæ Sauvegarde de la configuration : $(basename "$BACKUP_FILE")"
        cp "$INSTALL_DIR/config/config.yaml.local" "$BACKUP_FILE"
    fi
else
    echo "üì• Nouvelle installation..."
    mkdir -p "$INSTALL_DIR"
fi

# Maintenant on peut changer de r√©pertoire
cd "$INSTALL_DIR"

# T√©l√©chargement ou copie des fichiers
if [ "$INSTALL_MODE" = "remote" ]; then
    echo "üì• T√©l√©chargement des fichiers depuis GitHub..."
    
    # T√©l√©charger les fichiers principaux
    echo "  üìÑ T√©l√©chargement de arr-monitor.py..."
    curl -sL "$GITHUB_RAW_URL/arr-monitor.py" -o arr-monitor.py
    
    echo "  üìÑ T√©l√©chargement de requirements.txt..."
    curl -sL "$GITHUB_RAW_URL/requirements.txt" -o requirements.txt
    
    echo "  üìÑ T√©l√©chargement de config.yaml..."
    curl -sL "$GITHUB_RAW_URL/config.yaml" -o config.yaml.tmp
    
    echo "  üìÑ T√©l√©chargement de arr-monitor.service..."
    curl -sL "$GITHUB_RAW_URL/arr-monitor.service" -o arr-monitor.service.tmp
    
    # V√©rifier que les t√©l√©chargements ont r√©ussi
    if [ ! -f "arr-monitor.py" ] || [ ! -f "requirements.txt" ] || [ ! -f "config.yaml.tmp" ]; then
        echo "‚ùå Erreur lors du t√©l√©chargement des fichiers depuis GitHub"
        echo "ÔøΩ V√©rifiez votre connexion internet et r√©essayez"
        exit 1
    fi
    
    # Cr√©er le r√©pertoire config et d√©placer le fichier
    mkdir -p config
    mv config.yaml.tmp config/config.yaml
    
    echo "‚úÖ Fichiers t√©l√©charg√©s avec succ√®s"
else
    echo "ÔøΩüìã Copie des fichiers depuis $SOURCE_DIR vers $INSTALL_DIR..."
    cp "$SOURCE_DIR/arr-monitor.py" ./
    cp "$SOURCE_DIR/requirements.txt" ./
    
    # Cr√©ation du r√©pertoire config et copie
    mkdir -p config
    cp "$SOURCE_DIR/config.yaml" config/
    
    # Copier le fichier service pour installation locale
    if [ -f "$SOURCE_DIR/arr-monitor.service" ]; then
        cp "$SOURCE_DIR/arr-monitor.service" arr-monitor.service.tmp
    fi
fi

# Application automatique de la correction du bug get_queue si n√©cessaire
echo "üîß V√©rification et correction du code Python..."
if grep -q "return response\.json()" arr-monitor.py && ! grep -q "isinstance(data, list)" arr-monitor.py; then
    echo "üìù Application de la correction pour le traitement des queues API..."
    
    # Cr√©er une sauvegarde
    cp arr-monitor.py "arr-monitor.py.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Appliquer la correction avec sed
    sed -i.tmp 's/return response\.json()/data = response.json()\
                # L'\''API peut retourner une liste directement ou un objet avec '\''records'\''\
                if isinstance(data, list):\
                    return data\
                elif isinstance(data, dict) and '\''records'\'' in data:\
                    return data['\''records'\'']\
                else:\
                    # Si c'\''est un autre format, on retourne une liste vide\
                    self.logger.warning(f"‚ö†Ô∏è  {app_name} format de queue inattendu : {type(data)}")\
                    return []/' arr-monitor.py
    
    # Nettoyer le fichier temporaire
    rm -f arr-monitor.py.tmp
    
    echo "‚úÖ Correction appliqu√©e avec succ√®s"
else
    echo "‚úÖ Code d√©j√† corrig√© ou √† jour"
fi

# D√©tection et gestion de l'environnement virtuel
echo "üêç Gestion de l'environnement virtuel Python..."

# V√©rifier si un venv est d√©j√† actif et contient les d√©pendances n√©cessaires
EXISTING_VENV=""
if [ -n "$VIRTUAL_ENV" ] && [ -f "$VIRTUAL_ENV/bin/python" ]; then
    echo "üîç Environnement virtuel actif d√©tect√©: $VIRTUAL_ENV"
    
    # V√©rifier si les d√©pendances sont disponibles
    if "$VIRTUAL_ENV/bin/python" -c "import yaml, requests" &> /dev/null; then
        echo "‚úÖ D√©pendances d√©tect√©es dans l'environnement actif"
        EXISTING_VENV="$VIRTUAL_ENV"
    else
        echo "‚ö†Ô∏è  D√©pendances manquantes dans l'environnement actif"
    fi
fi

# V√©rifier la variable SETTINGS_SOURCE pour un venv existant
if [ -z "$EXISTING_VENV" ] && [ -n "$SETTINGS_SOURCE" ] && [ -f "$SETTINGS_SOURCE/venv/bin/python" ]; then
    echo "üîç Environnement virtuel d√©tect√© via SETTINGS_SOURCE: $SETTINGS_SOURCE/venv"
    
    if "$SETTINGS_SOURCE/venv/bin/python" -c "import yaml, requests" &> /dev/null; then
        echo "‚úÖ D√©pendances d√©tect√©es dans SETTINGS_SOURCE/venv"
        EXISTING_VENV="$SETTINGS_SOURCE/venv"
    else
        echo "‚ö†Ô∏è  D√©pendances manquantes dans SETTINGS_SOURCE/venv"
    fi
fi

if [ -n "$EXISTING_VENV" ]; then
    echo "üîó Utilisation de l'environnement virtuel existant: $EXISTING_VENV"
    
    # Cr√©er un lien symbolique vers le venv existant
    if [ -L "venv" ] || [ -d "venv" ]; then
        rm -rf venv
    fi
    ln -sf "$EXISTING_VENV" venv
    
    echo "‚úÖ Lien symbolique cr√©√© vers l'environnement existant"
    
    # V√©rification finale des d√©pendances
    if ! "$EXISTING_VENV/bin/python" -c "import yaml, requests" &> /dev/null; then
        echo "üì¶ Installation des d√©pendances manquantes..."
        "$EXISTING_VENV/bin/pip" install -r requirements.txt
    fi
else
    echo "üêç Cr√©ation d'un nouvel environnement virtuel..."
    if [ ! -d "venv" ] || [ -L "venv" ]; then
        rm -rf venv
        python3 -m venv venv
    fi
    
    # Activation de l'environnement virtuel
    echo "‚ö° Activation de l'environnement virtuel..."
    source venv/bin/activate
    
    # Installation des d√©pendances
    echo "üì¶ Installation des d√©pendances Python..."
    pip install --upgrade pip
    pip install -r requirements.txt
fi

# Cr√©ation des r√©pertoires
echo "üìÅ Cr√©ation des r√©pertoires..."
mkdir -p logs

# Configuration
if [ ! -f "config/config.yaml.local" ]; then
    echo "‚öôÔ∏è  Cr√©ation de la configuration locale..."
    cp config/config.yaml config/config.yaml.local
    CONFIG_CREATED=true
else
    echo "‚úÖ Configuration locale existante trouv√©e"
    echo "üí° La configuration existante a √©t√© pr√©serv√©e"
    CONFIG_CREATED=false
fi

# Fonction de d√©tection automatique des conteneurs
detect_containers() {
    echo "üîç D√©tection automatique des conteneurs..."
    
    # Variables globales pour la d√©tection
    SONARR_DETECTED=""
    RADARR_DETECTED=""
    
    if command -v docker &> /dev/null && docker ps &> /dev/null; then
        # Recherche conteneur Sonarr
        SONARR_CONTAINERS=$(docker ps --format "{{.Names}}" | grep -i sonarr)
        if [ -n "$SONARR_CONTAINERS" ]; then
            while read -r container; do
                if [ -n "$container" ]; then
                    # M√©thode 1: R√©cup√©ration IP du conteneur (r√©seau traefik_proxy)
                    SONARR_IP=$(docker inspect "$container" --format='{{.NetworkSettings.Networks.traefik_proxy.IPAddress}}' 2>/dev/null)
                    if [ -n "$SONARR_IP" ] && [ "$SONARR_IP" != "<no value>" ]; then
                        SONARR_DETECTED="http://$SONARR_IP:8989"
                        echo "  ‚úÖ Sonarr d√©tect√© via IP container: $container -> $SONARR_DETECTED"
                        break
                    fi
                    
                    # M√©thode 2: R√©cup√©ration IP du r√©seau par d√©faut
                    if [ -z "$SONARR_IP" ]; then
                        SONARR_IP=$(docker inspect "$container" --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null | head -1)
                        if [ -n "$SONARR_IP" ] && [ "$SONARR_IP" != "<no value>" ]; then
                            SONARR_DETECTED="http://$SONARR_IP:8989"
                            echo "  ‚úÖ Sonarr d√©tect√© via IP r√©seau: $container -> $SONARR_DETECTED"
                            break
                        fi
                    fi
                    
                    # M√©thode 3: Port mapping (fallback)
                    if [ -z "$SONARR_DETECTED" ]; then
                        SONARR_PORT=$(docker port "$container" 8989/tcp 2>/dev/null | cut -d':' -f2)
                        if [ -n "$SONARR_PORT" ]; then
                            SONARR_DETECTED="http://localhost:$SONARR_PORT"
                            echo "  ‚úÖ Sonarr d√©tect√© via port mapping: $container -> $SONARR_DETECTED"
                            break
                        fi
                    fi
                fi
            done <<< "$SONARR_CONTAINERS"
        fi
        
        # Recherche conteneur Radarr (m√™me logique)
        RADARR_CONTAINERS=$(docker ps --format "{{.Names}}" | grep -i radarr)
        if [ -n "$RADARR_CONTAINERS" ]; then
            while read -r container; do
                if [ -n "$container" ]; then
                    # M√©thode 1: R√©cup√©ration IP du conteneur (r√©seau traefik_proxy)
                    RADARR_IP=$(docker inspect "$container" --format='{{.NetworkSettings.Networks.traefik_proxy.IPAddress}}' 2>/dev/null)
                    if [ -n "$RADARR_IP" ] && [ "$RADARR_IP" != "<no value>" ]; then
                        RADARR_DETECTED="http://$RADARR_IP:7878"
                        echo "  ‚úÖ Radarr d√©tect√© via IP container: $container -> $RADARR_DETECTED"
                        break
                    fi
                    
                    # M√©thode 2: R√©cup√©ration IP du r√©seau par d√©faut
                    if [ -z "$RADARR_IP" ]; then
                        RADARR_IP=$(docker inspect "$container" --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null | head -1)
                        if [ -n "$RADARR_IP" ] && [ "$RADARR_IP" != "<no value>" ]; then
                            RADARR_DETECTED="http://$RADARR_IP:7878"
                            echo "  ‚úÖ Radarr d√©tect√© via IP r√©seau: $container -> $RADARR_DETECTED"
                            break
                        fi
                    fi
                    
                    # M√©thode 3: Port mapping (fallback)
                    if [ -z "$RADARR_DETECTED" ]; then
                        RADARR_PORT=$(docker port "$container" 7878/tcp 2>/dev/null | cut -d':' -f2)
                        if [ -n "$RADARR_PORT" ]; then
                            RADARR_DETECTED="http://localhost:$RADARR_PORT"
                            echo "  ‚úÖ Radarr d√©tect√© via port mapping: $container -> $RADARR_DETECTED"
                            break
                        fi
                    fi
                fi
            done <<< "$RADARR_CONTAINERS"
        fi
    fi
    
    # V√©rification des processus locaux si Docker ne trouve rien
    if [ -z "$SONARR_DETECTED" ]; then
        if command -v netstat &> /dev/null && netstat -tlnp 2>/dev/null | grep -q ":8989 "; then
            SONARR_DETECTED="http://localhost:8989"
            echo "  ‚úÖ Sonarr d√©tect√© (processus local): $SONARR_DETECTED"
        elif command -v ss &> /dev/null && ss -tlnp 2>/dev/null | grep -q ":8989 "; then
            SONARR_DETECTED="http://localhost:8989"
            echo "  ‚úÖ Sonarr d√©tect√© (processus local via ss): $SONARR_DETECTED"
        fi
    fi
    
    if [ -z "$RADARR_DETECTED" ]; then
        if command -v netstat &> /dev/null && netstat -tlnp 2>/dev/null | grep -q ":7878 "; then
            RADARR_DETECTED="http://localhost:7878"
            echo "  ‚úÖ Radarr d√©tect√© (processus local): $RADARR_DETECTED"
        elif command -v ss &> /dev/null && ss -tlnp 2>/dev/null | grep -q ":7878 "; then
            RADARR_DETECTED="http://localhost:7878"
            echo "  ‚úÖ Radarr d√©tect√© (processus local via ss): $RADARR_DETECTED"
        fi
    fi
    
    if [ -z "$SONARR_DETECTED" ] && [ -z "$RADARR_DETECTED" ]; then
        echo "  ‚ö†Ô∏è  Aucun conteneur/processus Sonarr/Radarr d√©tect√© automatiquement"
        echo "  üí° V√©rifiez que vos services sont d√©marr√©s et accessibles"
    fi
}

# Fonction pour d√©tecter les cl√©s API
detect_api_keys() {
    echo "üîë Recherche des cl√©s API..."
    
    # Variables globales pour la d√©tection
    SONARR_API_DETECTED=""
    RADARR_API_DETECTED=""
    
    # Recherche cl√© API Sonarr
    if command -v docker &> /dev/null && docker ps &> /dev/null; then
        SONARR_CONTAINERS=$(docker ps --format "{{.Names}}" | grep -i sonarr)
        if [ -n "$SONARR_CONTAINERS" ]; then
            while read -r container; do
                if [ -n "$container" ]; then
                    # M√©thode 1: Via chemin SETTINGS_STORAGE (comme dans votre code)
                    SETTINGS_STORAGE=${SETTINGS_STORAGE:-/opt/seedbox/docker}
                    CURRENT_USER=${USER:-kesurof}
                    CONFIG_PATH="$SETTINGS_STORAGE/docker/$CURRENT_USER/sonarr/config/config.xml"
                    
                    if [ -f "$CONFIG_PATH" ] && [ -r "$CONFIG_PATH" ]; then
                        SONARR_API_DETECTED=$(sed -n 's/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p' "$CONFIG_PATH" 2>/dev/null | head -1)
                        if [ -n "$SONARR_API_DETECTED" ]; then
                            echo "  üîë Cl√© API Sonarr trouv√©e via SETTINGS_STORAGE: ${SONARR_API_DETECTED:0:8}..."
                            break
                        fi
                    fi
                    
                    # M√©thode 2: Via conteneur Docker (chemins standards)
                    if [ -z "$SONARR_API_DETECTED" ]; then
                        SONARR_API_DETECTED=$(docker exec "$container" sh -c 'cat /config/config.xml 2>/dev/null || cat /app/config.xml 2>/dev/null || cat /data/config.xml 2>/dev/null' | sed -n 's/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p' | head -1 2>/dev/null)
                        if [ -n "$SONARR_API_DETECTED" ]; then
                            echo "  üîë Cl√© API Sonarr d√©tect√©e depuis conteneur $container: ${SONARR_API_DETECTED:0:8}..."
                            break
                        fi
                    fi
                fi
            done <<< "$SONARR_CONTAINERS"
        fi
    fi
    
    # Recherche cl√© API Radarr
    if command -v docker &> /dev/null && docker ps &> /dev/null; then
        RADARR_CONTAINERS=$(docker ps --format "{{.Names}}" | grep -i radarr)
        if [ -n "$RADARR_CONTAINERS" ]; then
            while read -r container; do
                if [ -n "$container" ]; then
                    # M√©thode 1: Via chemin SETTINGS_STORAGE (comme dans votre code)
                    SETTINGS_STORAGE=${SETTINGS_STORAGE:-/opt/seedbox/docker}
                    CURRENT_USER=${USER:-kesurof}
                    CONFIG_PATH="$SETTINGS_STORAGE/docker/$CURRENT_USER/radarr/config/config.xml"
                    
                    if [ -f "$CONFIG_PATH" ] && [ -r "$CONFIG_PATH" ]; then
                        RADARR_API_DETECTED=$(sed -n 's/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p' "$CONFIG_PATH" 2>/dev/null | head -1)
                        if [ -n "$RADARR_API_DETECTED" ]; then
                            echo "  üîë Cl√© API Radarr trouv√©e via SETTINGS_STORAGE: ${RADARR_API_DETECTED:0:8}..."
                            break
                        fi
                    fi
                    
                    # M√©thode 2: Via conteneur Docker (chemins standards)
                    if [ -z "$RADARR_API_DETECTED" ]; then
                        RADARR_API_DETECTED=$(docker exec "$container" sh -c 'cat /config/config.xml 2>/dev/null || cat /app/config.xml 2>/dev/null || cat /data/config.xml 2>/dev/null' | sed -n 's/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p' | head -1 2>/dev/null)
                        if [ -n "$RADARR_API_DETECTED" ]; then
                            echo "  üîë Cl√© API Radarr d√©tect√©e depuis conteneur $container: ${RADARR_API_DETECTED:0:8}..."
                            break
                        fi
                    fi
                fi
            done <<< "$RADARR_CONTAINERS"
        fi
    fi
    
    # Recherche dans les fichiers locaux communs (fallback)
    if [ -z "$SONARR_API_DETECTED" ]; then
        for config_path in "/home/$USER/.config/Sonarr/config.xml" "/opt/Sonarr/config.xml" "/var/lib/sonarr/config.xml" "/usr/local/share/sonarr/config.xml"; do
            if [ -f "$config_path" ] && [ -r "$config_path" ]; then
                SONARR_API_DETECTED=$(sed -n 's/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p' "$config_path" 2>/dev/null | head -1)
                if [ -n "$SONARR_API_DETECTED" ]; then
                    echo "  üîë Cl√© API Sonarr trouv√©e dans $config_path: ${SONARR_API_DETECTED:0:8}..."
                    break
                fi
            fi
        done
    fi
    
    if [ -z "$RADARR_API_DETECTED" ]; then
        for config_path in "/home/$USER/.config/Radarr/config.xml" "/opt/Radarr/config.xml" "/var/lib/radarr/config.xml" "/usr/local/share/radarr/config.xml"; do
            if [ -f "$config_path" ] && [ -r "$config_path" ]; then
                RADARR_API_DETECTED=$(sed -n 's/.*<ApiKey>\(.*\)<\/ApiKey>.*/\1/p' "$config_path" 2>/dev/null | head -1)
                if [ -n "$RADARR_API_DETECTED" ]; then
                    echo "  üîë Cl√© API Radarr trouv√©e dans $config_path: ${RADARR_API_DETECTED:0:8}..."
                    break
                fi
            fi
        done
    fi
    
    if [ -z "$SONARR_API_DETECTED" ] && [ -z "$RADARR_API_DETECTED" ]; then
        echo "  ‚ö†Ô∏è  Aucune cl√© API d√©tect√©e automatiquement"
        echo "  üí° Les cl√©s API devront √™tre saisies manuellement"
        echo "  üí° V√©rifiez les variables d'environnement SETTINGS_STORAGE si vous utilisez une structure personnalis√©e"
    fi
}

# Configuration interactive seulement si nouveau fichier cr√©√©
if [ "$CONFIG_CREATED" = true ]; then
    echo ""
    echo "üìã Configuration des applications :"
    
    # D√©tection automatique
    detect_containers
    detect_api_keys
    
    # Configuration Sonarr
    echo ""
    read -p "üì∫ Activer Sonarr ? [Y/n] : " ENABLE_SONARR
    ENABLE_SONARR=${ENABLE_SONARR:-Y}
    
    if [[ $ENABLE_SONARR =~ ^[Yy]$ ]]; then
        DEFAULT_SONARR_URL=${SONARR_DETECTED:-http://localhost:8989}
        read -p "üì∫ URL Sonarr [$DEFAULT_SONARR_URL] : " SONARR_URL
        SONARR_URL=${SONARR_URL:-$DEFAULT_SONARR_URL}
        
        if [ -n "$SONARR_API_DETECTED" ]; then
            read -p "üì∫ Cl√© API Sonarr [D√©tect√©e: ${SONARR_API_DETECTED:0:8}...] : " SONARR_API
            SONARR_API=${SONARR_API:-$SONARR_API_DETECTED}
        else
            read -p "üì∫ Cl√© API Sonarr : " SONARR_API
        fi
        
        # Test de connexion Sonarr
        if [ -n "$SONARR_API" ]; then
            echo "üß™ Test de connexion Sonarr..."
            if curl -s -H "X-Api-Key: $SONARR_API" "$SONARR_URL/api/v3/system/status" > /dev/null; then
                echo "‚úÖ Sonarr connect√© avec succ√®s"
            else
                echo "‚ö†Ô∏è  Impossible de se connecter √† Sonarr (v√©rifiez l'URL et la cl√© API)"
            fi
        fi
    fi
    
    # Configuration Radarr
    echo ""
    read -p "üé¨ Activer Radarr ? [Y/n] : " ENABLE_RADARR
    ENABLE_RADARR=${ENABLE_RADARR:-Y}
    
    if [[ $ENABLE_RADARR =~ ^[Yy]$ ]]; then
        DEFAULT_RADARR_URL=${RADARR_DETECTED:-http://localhost:7878}
        read -p "üé¨ URL Radarr [$DEFAULT_RADARR_URL] : " RADARR_URL
        RADARR_URL=${RADARR_URL:-$DEFAULT_RADARR_URL}
        
        if [ -n "$RADARR_API_DETECTED" ]; then
            read -p "üé¨ Cl√© API Radarr [D√©tect√©e: ${RADARR_API_DETECTED:0:8}...] : " RADARR_API
            RADARR_API=${RADARR_API:-$RADARR_API_DETECTED}
        else
            read -p "üé¨ Cl√© API Radarr : " RADARR_API
        fi
        
        # Test de connexion Radarr
        if [ -n "$RADARR_API" ]; then
            echo "üß™ Test de connexion Radarr..."
            if curl -s -H "X-Api-Key: $RADARR_API" "$RADARR_URL/api/v3/system/status" > /dev/null; then
                echo "‚úÖ Radarr connect√© avec succ√®s"
            else
                echo "‚ö†Ô∏è  Impossible de se connecter √† Radarr (v√©rifiez l'URL et la cl√© API)"
            fi
        fi
    fi
    
    # Configuration des actions automatiques
    echo ""
    read -p "üîÑ Activer les actions automatiques (relance/suppression) ? [Y/n] : " AUTO_ACTIONS
    AUTO_ACTIONS=${AUTO_ACTIONS:-Y}
    
    # Mise √† jour du fichier de configuration
    echo "üìù Mise √† jour de la configuration..."
    
    if [[ $ENABLE_SONARR =~ ^[Yy]$ ]]; then
        sed -i.bak "s|url: \"http://localhost:8989\"|url: \"$SONARR_URL\"|" config/config.yaml.local
        sed -i.bak2 "s|api_key: \"your_sonarr_api_key\"|api_key: \"$SONARR_API\"|" config/config.yaml.local
    else
        sed -i.bak "s|enabled: true|enabled: false|" config/config.yaml.local
    fi
    
    if [[ $ENABLE_RADARR =~ ^[Yy]$ ]]; then
        sed -i.bak3 "s|url: \"http://localhost:7878\"|url: \"$RADARR_URL\"|" config/config.yaml.local
        sed -i.bak4 "s|api_key: \"your_radarr_api_key\"|api_key: \"$RADARR_API\"|" config/config.yaml.local
    else
        sed -i.bak3 "/radarr:/,/check_stuck:/ s|enabled: true|enabled: false|" config/config.yaml.local
    fi
    
    if [[ $AUTO_ACTIONS =~ ^[Nn]$ ]]; then
        sed -i.bak5 "s|auto_retry: true|auto_retry: false|" config/config.yaml.local
    fi
    
    rm -f config/config.yaml.local.bak*
    
    echo "‚úÖ Configuration cr√©√©e dans config/config.yaml.local"
    
    # Test automatique apr√®s configuration
    echo ""
    echo "üß™ Test automatique de l'installation..."
    if python arr-monitor.py --test --config config/config.yaml.local; then
        echo "‚úÖ Test r√©ussi - Installation fonctionnelle !"
    else
        echo "‚ö†Ô∏è  Test √©chou√© - V√©rifiez la configuration"
        echo "üí° Logs disponibles dans logs/arr-monitor.log"
    fi
else
    echo "‚úÖ Configuration locale existante pr√©serv√©e"
    echo "üí° Pour reconfigurer, supprimez config/config.yaml.local et relancez l'installation"
fi

echo ""
if [ "$IS_UPDATE" = true ]; then
    echo "‚úÖ Mise √† jour termin√©e avec succ√®s !"
    echo "üí° Votre configuration existante a √©t√© pr√©serv√©e"
else
    echo "‚úÖ Installation termin√©e avec succ√®s !"
fi
echo ""
echo "üìã Utilisation :"
echo "   cd $INSTALL_DIR"
echo "   source venv/bin/activate"
echo "   python arr-monitor.py --config config/config.yaml.local"
echo ""
echo "üìã Commandes utiles :"
echo "   # Test unique"
echo "   python arr-monitor.py --test --config config/config.yaml.local"
echo ""
echo "   # Mode debug"
echo "   python arr-monitor.py --debug --config config/config.yaml.local"
echo ""
echo "   # Simulation sans actions"
echo "   python arr-monitor.py --dry-run --config config/config.yaml.local"
echo ""
echo "   # Voir les logs"
echo "   tail -f logs/arr-monitor.log"
echo ""
echo "üìÅ Configuration : $INSTALL_DIR/config/config.yaml.local"
echo "üìù Logs : $INSTALL_DIR/logs/arr-monitor.log"
echo ""
echo "üîß Pour cr√©er un service syst√®me (optionnel) :"
echo ""
if [ "$FORCE_INSTALL" = true ]; then
    # Mode non-interactif pour --update - ne pas installer le service automatiquement
    INSTALL_SERVICE="N"
    echo "üìã Mode mise √† jour : service systemd non modifi√©"
else
    read -p "üõ†Ô∏è  Voulez-vous installer le service systemd ? [y/N] : " INSTALL_SERVICE
fi
INSTALL_SERVICE=${INSTALL_SERVICE:-N}

if [[ $INSTALL_SERVICE =~ ^[Yy]$ ]]; then
    # V√©rifier la disponibilit√© du fichier service
    SERVICE_FILE=""
    if [ -f "arr-monitor.service.tmp" ]; then
        SERVICE_FILE="arr-monitor.service.tmp"
    elif [ "$INSTALL_MODE" = "remote" ]; then
        # T√©l√©charger le fichier service si pas encore fait
        echo "üì• T√©l√©chargement du fichier service systemd..."
        curl -sL "$GITHUB_RAW_URL/arr-monitor.service" -o arr-monitor.service.tmp
        if [ -f "arr-monitor.service.tmp" ]; then
            SERVICE_FILE="arr-monitor.service.tmp"
        fi
    fi
    
    if [ -n "$SERVICE_FILE" ]; then
        echo "üìã Installation du service systemd..."
        
        # V√©rifier que l'environnement virtuel fonctionne
        VENV_PYTHON_PATH=""
        
        # D√©terminer le chemin Python √† utiliser
        if [ -L "$INSTALL_DIR/venv" ]; then
            # Si c'est un lien symbolique, r√©soudre le chemin r√©el
            REAL_VENV_PATH=$(readlink -f "$INSTALL_DIR/venv")
            VENV_PYTHON_PATH="$REAL_VENV_PATH/bin/python"
            echo "üîó Utilisation du venv li√©: $REAL_VENV_PATH"
        elif [ -d "$INSTALL_DIR/venv" ]; then
            # Si c'est un r√©pertoire normal
            VENV_PYTHON_PATH="$INSTALL_DIR/venv/bin/python"
            echo "üìÅ Utilisation du venv local: $INSTALL_DIR/venv"
        else
            echo "‚ùå Aucun environnement virtuel trouv√©"
            exit 1
        fi
        
        if ! "$VENV_PYTHON_PATH" -c "import yaml, requests" &> /dev/null; then
            echo "‚ö†Ô∏è  Probl√®me avec l'environnement virtuel, r√©installation des d√©pendances..."
            if [ -L "$INSTALL_DIR/venv" ]; then
                # Pour un lien symbolique, installer dans le venv original
                REAL_VENV_PATH=$(readlink -f "$INSTALL_DIR/venv")
                "$REAL_VENV_PATH/bin/pip" install -r requirements.txt
            else
                # Pour un venv local, activer et installer
                source venv/bin/activate
                pip install -r requirements.txt
            fi
        fi
        
        # Copie et modification du fichier service avec chemin absolu
        cp "$SERVICE_FILE" arr-monitor.service.final
        sed -i.bak "s|%USER%|$USER|g" arr-monitor.service.final
        sed -i.bak2 "s|%INSTALL_DIR%|$INSTALL_DIR|g" arr-monitor.service.final
        
        # Installation du service
        sudo cp arr-monitor.service.final /etc/systemd/system/arr-monitor.service
        sudo systemctl daemon-reload
        sudo systemctl enable arr-monitor
        
        # Nettoyer les fichiers temporaires
        rm -f arr-monitor.service.final*
        rm -f arr-monitor.service.tmp
        
        echo "‚úÖ Service systemd install√© et activ√©"
        echo "   sudo systemctl start arr-monitor    # D√©marrer"
        echo "   sudo systemctl status arr-monitor   # V√©rifier le statut"
        echo "   sudo journalctl -u arr-monitor -f   # Voir les logs"
        
        # Test du service
        echo ""
        echo "üß™ Test du service systemd..."
        if sudo systemctl start arr-monitor && sleep 2 && sudo systemctl is-active --quiet arr-monitor; then
            echo "‚úÖ Service d√©marr√© avec succ√®s"
        else
            echo "‚ö†Ô∏è  Probl√®me de d√©marrage du service"
            echo "üìã V√©rification des logs :"
            sudo journalctl -u arr-monitor -n 10 --no-pager
        fi
    else
        echo "‚ö†Ô∏è  Fichier service non disponible"
        echo "üí° Vous pouvez cr√©er le service manuellement avec les instructions ci-dessous"
    fi
else
    echo "üìã Instructions pour installation manuelle du service :"
    echo "   # Cr√©er le fichier service"
    echo "   sudo tee /etc/systemd/system/arr-monitor.service > /dev/null <<EOF"
    echo "[Unit]"
    echo "Description=Arr Monitor - Surveillance Sonarr/Radarr"
    echo "After=network.target"
    echo ""
    echo "[Service]"
    echo "Type=simple"
    echo "User=$USER"
    echo "WorkingDirectory=$INSTALL_DIR"
    echo "ExecStart=$INSTALL_DIR/venv/bin/python $INSTALL_DIR/arr-monitor.py --config $INSTALL_DIR/config/config.yaml.local"
    echo "Restart=always"
    echo "RestartSec=30"
    echo ""
    echo "[Install]"
    echo "WantedBy=multi-user.target"
    echo "EOF"
    echo ""
    echo "   # Activer et d√©marrer le service"
    echo "   sudo systemctl daemon-reload"
    echo "   sudo systemctl enable arr-monitor"
    echo "   sudo systemctl start arr-monitor"
    echo "   sudo systemctl status arr-monitor"
fi
