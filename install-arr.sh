#!/bin/bash

# Script d'installation Arr Monitor (Surveillance Sonarr/Radarr)
set -euo pipefail

# Gestion des param√®tres
FORCE_INSTALL=false
for arg in "$@"; do
    case $arg in
        --update)
            FORCE_INSTALL=true
            shift
            ;;
        *)
            ;;
    esac
done

echo "üöÄ Installation Arr Monitor - Surveillance Sonarr/Radarr"
echo ""
echo "üìÇ Ce script va :"
echo "   ‚Ä¢ Copier les fichiers depuis le r√©pertoire courant"
echo "   ‚Ä¢ Les installer dans un r√©pertoire de destination"
echo "   ‚Ä¢ Cr√©er un environnement Python virtuel"
echo "   ‚Ä¢ Configurer l'application de mani√®re interactive"
echo ""
echo "üí° Utilisation typique :"
echo "   git clone https://github.com/kesurof/Arr-Monitor.git"
echo "   cd Arr-Monitor"
echo "   ./install-arr.sh"
echo ""

# V√©rification des pr√©requis
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 n'est pas install√©. Veuillez l'installer avant de continuer."
    exit 1
fi

if ! command -v pip3 &> /dev/null; then
    echo "‚ùå pip3 n'est pas install√©. Veuillez l'installer avant de continuer."
    exit 1
fi

# V√©rification que nous sommes dans le bon r√©pertoire
if [ ! -f "arr-monitor.py" ] || [ ! -f "requirements.txt" ] || [ ! -f "config.yaml" ]; then
    echo "‚ùå Fichiers manquants dans $(pwd) :"
    [ ! -f "arr-monitor.py" ] && echo "   - arr-monitor.py"
    [ ! -f "requirements.txt" ] && echo "   - requirements.txt"
    [ ! -f "config.yaml" ] && echo "   - config.yaml"
    echo ""
    echo "üí° Assurez-vous d'ex√©cuter ce script depuis le r√©pertoire contenant les fichiers du projet."
    echo "   Exemple : cd /path/to/Arr-Monitor && ./install-arr.sh"
    exit 1
fi

SOURCE_DIR="$(pwd)"

# Demander l'emplacement pour l'installation
echo ""
if [ "$FORCE_INSTALL" = true ]; then
    # Mode non-interactif pour --update
    SCRIPTS_DIR="/home/$USER/scripts"
    echo "üìÅ Mode mise √† jour : utilisation du r√©pertoire par d√©faut"
else
    read -p "üìÅ R√©pertoire d'installation des scripts [/home/$USER/scripts] : " SCRIPTS_DIR
fi
SCRIPTS_DIR=${SCRIPTS_DIR:-/home/$USER/scripts}

# R√©pertoire d'installation final
INSTALL_DIR="$SCRIPTS_DIR/Arr-Monitor"
echo "üìÅ Installation dans : $INSTALL_DIR"

# Cr√©ation du r√©pertoire d'installation
IS_UPDATE=false
if [ -d "$INSTALL_DIR" ]; then
    echo "üìÇ Installation existante d√©tect√©e. Mode mise √† jour activ√©."
    IS_UPDATE=true
    
    # Sauvegarde de la configuration existante si elle existe
    if [ -f "$INSTALL_DIR/config/config.yaml.local" ]; then
        BACKUP_FILE="$INSTALL_DIR/config/config.yaml.local.backup.$(date +%Y%m%d_%H%M%S)"
        echo "üíæ Sauvegarde de la configuration : $(basename "$BACKUP_FILE")"
        cp "$INSTALL_DIR/config/config.yaml.local" "$BACKUP_FILE"
    fi
else
    echo "üì• Nouvelle installation..."
    mkdir -p "$INSTALL_DIR"
fi

# Maintenant on peut changer de r√©pertoire
cd "$INSTALL_DIR"

# Copie des fichiers depuis le r√©pertoire source
echo "üìã Copie des fichiers depuis $SOURCE_DIR vers $INSTALL_DIR..."
cp "$SOURCE_DIR/arr-monitor.py" ./
cp "$SOURCE_DIR/requirements.txt" ./

# Cr√©ation du r√©pertoire config et copie
mkdir -p config
cp "$SOURCE_DIR/config.yaml" config/

# Copier le fichier service pour installation
if [ -f "$SOURCE_DIR/arr-monitor.service" ]; then
    cp "$SOURCE_DIR/arr-monitor.service" arr-monitor.service.tmp
fi

echo "‚úÖ Fichiers copi√©s avec succ√®s"

# Application automatique de la correction du bug get_queue si n√©cessaire
echo "üîß V√©rification et correction du code Python..."
if grep -q "return response\.json()" arr-monitor.py && ! grep -q "isinstance(data, list)" arr-monitor.py; then
    echo "üìù Application de la correction pour le traitement des queues API..."
    
    # Cr√©er une sauvegarde
    cp arr-monitor.py "arr-monitor.py.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Appliquer la correction avec sed
    sed -i.tmp 's/return response\.json()/data = response.json()\
                # L'\''API peut retourner une liste directement ou un objet avec '\''records'\''\
                if isinstance(data, list):\
                    return data\
                elif isinstance(data, dict) and '\''records'\'' in data:\
                    return data['\''records'\'']\
                else:\
                    # Si c'\''est un autre format, on retourne une liste vide\
                    self.logger.warning(f"‚ö†Ô∏è  {app_name} format de queue inattendu : {type(data)}")\
                    return []/' arr-monitor.py
    
    # Nettoyer le fichier temporaire
    rm -f arr-monitor.py.tmp
    
    echo "‚úÖ Correction appliqu√©e avec succ√®s"
else
    echo "‚úÖ Code d√©j√† corrig√© ou √† jour"
fi

# D√©tection et gestion de l'environnement virtuel
echo "üêç Gestion de l'environnement virtuel Python..."

# V√©rifier si un venv est d√©j√† actif et contient les d√©pendances n√©cessaires
EXISTING_VENV=""
if [ -n "$VIRTUAL_ENV" ] && [ -f "$VIRTUAL_ENV/bin/python" ]; then
    # V√©rifier que les d√©pendances sont install√©es
    if "$VIRTUAL_ENV/bin/python" -c "import yaml, requests" &> /dev/null; then
        echo "üîç Environnement virtuel actif d√©tect√©: $VIRTUAL_ENV"
        echo "‚úÖ D√©pendances d√©tect√©es dans l'environnement actif"
        EXISTING_VENV="$VIRTUAL_ENV"
    else
        echo "üîç Environnement virtuel actif d√©tect√©: $VIRTUAL_ENV"
        echo "‚ö†Ô∏è  D√©pendances manquantes dans l'environnement actif"
    fi
fi

# V√©rifier si un venv seedbox-compose existe
if [ -z "$EXISTING_VENV" ] && [ -n "$SETTINGS_SOURCE" ] && [ -f "$SETTINGS_SOURCE/venv/bin/python" ]; then
    # V√©rifier que les d√©pendances sont install√©es
    if "$SETTINGS_SOURCE/venv/bin/python" -c "import yaml, requests" &> /dev/null; then
        echo "üîç Environnement virtuel seedbox-compose d√©tect√©: $SETTINGS_SOURCE/venv"
        echo "‚úÖ D√©pendances d√©tect√©es dans l'environnement seedbox-compose"
        EXISTING_VENV="$SETTINGS_SOURCE/venv"
    else
        echo "üîç Environnement virtuel seedbox-compose d√©tect√©: $SETTINGS_SOURCE/venv"
        echo "‚ö†Ô∏è  D√©pendances manquantes dans l'environnement seedbox-compose"
    fi
fi

if [ -n "$EXISTING_VENV" ]; then
    echo "üîó Utilisation de l'environnement virtuel existant: $EXISTING_VENV"
    
    # V√©rifier si c'est un lien symbolique existant et s'il pointe au bon endroit
    if [ -L "venv" ]; then
        CURRENT_TARGET=$(readlink "venv")
        if [ "$CURRENT_TARGET" != "$EXISTING_VENV" ]; then
            echo "üîó Mise √† jour du lien symbolique venv"
            rm venv
            ln -sf "$EXISTING_VENV" venv
        else
            echo "‚úÖ Lien symbolique venv d√©j√† correct"
        fi
    else
        # Supprimer l'ancien venv s'il existe et cr√©er le lien
        [ -d "venv" ] && rm -rf venv
        ln -sf "$EXISTING_VENV" venv
        echo "‚úÖ Lien symbolique cr√©√© vers l'environnement existant"
    fi
else
    echo "üì¶ Cr√©ation d'un nouvel environnement virtuel..."
    
    # Supprimer l'ancien environnement s'il existe
    [ -e "venv" ] && rm -rf venv
    
    # Cr√©er le nouvel environnement
    python3 -m venv venv
    
    # Activer et installer les d√©pendances
    source venv/bin/activate
    echo "üì¶ Installation des d√©pendances..."
    pip install --upgrade pip
    pip install -r requirements.txt
    
    echo "‚úÖ Environnement virtuel cr√©√© et configur√©"
fi

# Cr√©er les r√©pertoires n√©cessaires
echo "üìÅ Cr√©ation des r√©pertoires..."
mkdir -p logs

# Configuration interactive seulement si nouveau fichier cr√©√©
CONFIG_CREATED=false
if [ ! -f "config/config.yaml.local" ]; then
    cp config/config.yaml config/config.yaml.local
    CONFIG_CREATED=true
else
    CONFIG_CREATED=false
fi

# Fonctions de d√©tection
detect_containers() {
    SONARR_DETECTED=""
    RADARR_DETECTED=""
    
    echo "üîç D√©tection automatique des conteneurs..."
    
    if command -v docker &> /dev/null; then
        # D√©tecter Sonarr
        if docker ps --format "table {{.Names}}" | grep -q "sonarr"; then
            SONARR_CONTAINER=$(docker ps --format "table {{.Names}}" | grep "sonarr" | head -1)
            
            # M√©thode 1: Essayer r√©seau traefik_proxy
            SONARR_IP=$(docker inspect $SONARR_CONTAINER --format='{{.NetworkSettings.Networks.traefik_proxy.IPAddress}}' 2>/dev/null | grep -v '^$' | head -1)
            
            # M√©thode 2: Si pas de traefik_proxy, prendre la premi√®re IP disponible
            if [ -z "$SONARR_IP" ]; then
                SONARR_IP=$(docker inspect $SONARR_CONTAINER --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null | head -1)
            fi
            
            # M√©thode 3: Si toujours pas d'IP, utiliser le port mapping
            if [ -z "$SONARR_IP" ]; then
                SONARR_PORT=$(docker port $SONARR_CONTAINER 8989/tcp 2>/dev/null | cut -d: -f2)
                if [ -n "$SONARR_PORT" ]; then
                    SONARR_DETECTED="http://localhost:$SONARR_PORT"
                    echo "  ‚úÖ Sonarr d√©tect√© via port mapping: $SONARR_CONTAINER -> $SONARR_DETECTED"
                fi
            else
                SONARR_DETECTED="http://$SONARR_IP:8989"
                echo "  ‚úÖ Sonarr d√©tect√© via IP container: $SONARR_CONTAINER -> $SONARR_DETECTED"
            fi
        fi
        
        # D√©tecter Radarr (m√™me logique)
        if docker ps --format "table {{.Names}}" | grep -q "radarr"; then
            RADARR_CONTAINER=$(docker ps --format "table {{.Names}}" | grep "radarr" | head -1)
            
            # M√©thode 1: Essayer r√©seau traefik_proxy
            RADARR_IP=$(docker inspect $RADARR_CONTAINER --format='{{.NetworkSettings.Networks.traefik_proxy.IPAddress}}' 2>/dev/null | grep -v '^$' | head -1)
            
            # M√©thode 2: Si pas de traefik_proxy, prendre la premi√®re IP disponible
            if [ -z "$RADARR_IP" ]; then
                RADARR_IP=$(docker inspect $RADARR_CONTAINER --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null | head -1)
            fi
            
            # M√©thode 3: Si toujours pas d'IP, utiliser le port mapping
            if [ -z "$RADARR_IP" ]; then
                RADARR_PORT=$(docker port $RADARR_CONTAINER 7878/tcp 2>/dev/null | cut -d: -f2)
                if [ -n "$RADARR_PORT" ]; then
                    RADARR_DETECTED="http://localhost:$RADARR_PORT"
                    echo "  ‚úÖ Radarr d√©tect√© via port mapping: $RADARR_CONTAINER -> $RADARR_DETECTED"
                fi
            else
                RADARR_DETECTED="http://$RADARR_IP:7878"
                echo "  ‚úÖ Radarr d√©tect√© via IP container: $RADARR_CONTAINER -> $RADARR_DETECTED"
            fi
        fi
        
        if [ -z "$SONARR_DETECTED" ] && [ -z "$RADARR_DETECTED" ]; then
            echo "  ‚ö†Ô∏è  Aucun conteneur Sonarr/Radarr d√©tect√©"
        fi
    fi
}

detect_api_keys() {
    SONARR_API_DETECTED=""
    RADARR_API_DETECTED=""
    
    echo "üîë Recherche des cl√©s API..."
    
    # Fonction pour extraire la cl√© API depuis un fichier config.xml
    extract_api_key() {
        local config_file="$1"
        if [ -f "$config_file" ]; then
            grep -o '<ApiKey>[^<]*</ApiKey>' "$config_file" 2>/dev/null | sed 's/<ApiKey>\(.*\)<\/ApiKey>/\1/' | head -1
        fi
    }
    
    # Chercher les cl√©s API Sonarr
    # M√©thode 1: Via SETTINGS_STORAGE (structure seedbox)
    if [ -n "$SETTINGS_STORAGE" ] && [ -f "$SETTINGS_STORAGE/docker/$USER/sonarr/config/config.xml" ]; then
        SONARR_API_DETECTED=$(extract_api_key "$SETTINGS_STORAGE/docker/$USER/sonarr/config/config.xml")
        [ -n "$SONARR_API_DETECTED" ] && echo "  üîë Cl√© API Sonarr trouv√©e via SETTINGS_STORAGE: ${SONARR_API_DETECTED:0:8}..."
    fi
    
    # M√©thode 2: Via conteneur Docker  
    if [ -z "$SONARR_API_DETECTED" ] && command -v docker &> /dev/null && docker ps --format "table {{.Names}}" | grep -q "sonarr"; then
        SONARR_CONTAINER=$(docker ps --format "table {{.Names}}" | grep "sonarr" | head -1)
        SONARR_API_DETECTED=$(docker exec "$SONARR_CONTAINER" cat /config/config.xml 2>/dev/null | grep -o '<ApiKey>[^<]*</ApiKey>' | sed 's/<ApiKey>\(.*\)<\/ApiKey>/\1/' | head -1)
        [ -n "$SONARR_API_DETECTED" ] && echo "  üîë Cl√© API Sonarr trouv√©e via conteneur: ${SONARR_API_DETECTED:0:8}..."
    fi
    
    # M√©thode 3: Fichiers locaux standards
    if [ -z "$SONARR_API_DETECTED" ] && [ -f "/home/$USER/.config/Sonarr/config.xml" ]; then
        SONARR_API_DETECTED=$(extract_api_key "/home/$USER/.config/Sonarr/config.xml")
        [ -n "$SONARR_API_DETECTED" ] && echo "  üîë Cl√© API Sonarr trouv√©e dans ~/.config: ${SONARR_API_DETECTED:0:8}..."
    fi
    
    # Chercher les cl√©s API Radarr (m√™me logique)
    # M√©thode 1: Via SETTINGS_STORAGE
    if [ -n "$SETTINGS_STORAGE" ] && [ -f "$SETTINGS_STORAGE/docker/$USER/radarr/config/config.xml" ]; then
        RADARR_API_DETECTED=$(extract_api_key "$SETTINGS_STORAGE/docker/$USER/radarr/config/config.xml")
        [ -n "$RADARR_API_DETECTED" ] && echo "  üîë Cl√© API Radarr trouv√©e via SETTINGS_STORAGE: ${RADARR_API_DETECTED:0:8}..."
    fi
    
    # M√©thode 2: Via conteneur Docker
    if [ -z "$RADARR_API_DETECTED" ] && command -v docker &> /dev/null && docker ps --format "table {{.Names}}" | grep -q "radarr"; then
        RADARR_CONTAINER=$(docker ps --format "table {{.Names}}" | grep "radarr" | head -1)
        RADARR_API_DETECTED=$(docker exec "$RADARR_CONTAINER" cat /config/config.xml 2>/dev/null | grep -o '<ApiKey>[^<]*</ApiKey>' | sed 's/<ApiKey>\(.*\)<\/ApiKey>/\1/' | head -1)
        [ -n "$RADARR_API_DETECTED" ] && echo "  üîë Cl√© API Radarr trouv√©e via conteneur: ${RADARR_API_DETECTED:0:8}..."
    fi
    
    # M√©thode 3: Fichiers locaux standards
    if [ -z "$RADARR_API_DETECTED" ] && [ -f "/home/$USER/.config/Radarr/config.xml" ]; then
        RADARR_API_DETECTED=$(extract_api_key "/home/$USER/.config/Radarr/config.xml")
        [ -n "$RADARR_API_DETECTED" ] && echo "  üîë Cl√© API Radarr trouv√©e dans ~/.config: ${RADARR_API_DETECTED:0:8}..."
    fi
}

# Configuration interactive seulement si nouveau fichier cr√©√©
if [ "$CONFIG_CREATED" = true ]; then
    echo ""
    echo "üìã Configuration des applications :"
    
    # D√©tection automatique
    detect_containers
    detect_api_keys
    
    # Configuration Sonarr
    echo ""
    read -p "üì∫ Activer Sonarr ? [Y/n] : " ENABLE_SONARR
    ENABLE_SONARR=${ENABLE_SONARR:-Y}
    
    if [[ $ENABLE_SONARR =~ ^[Yy]$ ]]; then
        DEFAULT_SONARR_URL=${SONARR_DETECTED:-http://localhost:8989}
        read -p "üì∫ URL Sonarr [$DEFAULT_SONARR_URL] : " SONARR_URL
        SONARR_URL=${SONARR_URL:-$DEFAULT_SONARR_URL}
        
        if [ -n "$SONARR_API_DETECTED" ]; then
            read -p "üîë Cl√© API Sonarr [d√©tect√©e automatiquement] : " SONARR_API
            SONARR_API=${SONARR_API:-$SONARR_API_DETECTED}
        else
            read -p "üîë Cl√© API Sonarr : " SONARR_API
        fi
        
        # Test de connexion
        echo "üß™ Test de connexion Sonarr..."
        if python -c "
import requests
try:
    response = requests.get('$SONARR_URL/api/v3/system/status', headers={'X-Api-Key': '$SONARR_API'}, timeout=5)
    if response.status_code == 200:
        print('‚úÖ Connexion Sonarr r√©ussie')
        exit(0)
    else:
        print('‚ö†Ô∏è  R√©ponse inattendue de Sonarr (code: {})'.format(response.status_code))
        exit(1)
except Exception as e:
    print('‚ö†Ô∏è  Impossible de se connecter √† Sonarr (v√©rifiez l'\''URL et la cl√© API)')
    exit(1)
" 2>/dev/null; then
            :
        else
            :
        fi
    fi
    
    # Configuration Radarr
    echo ""
    read -p "üé¨ Activer Radarr ? [Y/n] : " ENABLE_RADARR
    ENABLE_RADARR=${ENABLE_RADARR:-Y}
    
    if [[ $ENABLE_RADARR =~ ^[Yy]$ ]]; then
        DEFAULT_RADARR_URL=${RADARR_DETECTED:-http://localhost:7878}
        read -p "üé¨ URL Radarr [$DEFAULT_RADARR_URL] : " RADARR_URL
        RADARR_URL=${RADARR_URL:-$DEFAULT_RADARR_URL}
        
        if [ -n "$RADARR_API_DETECTED" ]; then
            read -p "üîë Cl√© API Radarr [d√©tect√©e automatiquement] : " RADARR_API
            RADARR_API=${RADARR_API:-$RADARR_API_DETECTED}
        else
            read -p "üîë Cl√© API Radarr : " RADARR_API
        fi
        
        # Test de connexion
        echo "üß™ Test de connexion Radarr..."
        if python -c "
import requests
try:
    response = requests.get('$RADARR_URL/api/v3/system/status', headers={'X-Api-Key': '$RADARR_API'}, timeout=5)
    if response.status_code == 200:
        print('‚úÖ Connexion Radarr r√©ussie')
        exit(0)
    else:
        print('‚ö†Ô∏è  R√©ponse inattendue de Radarr (code: {})'.format(response.status_code))
        exit(1)
except Exception as e:
    print('‚ö†Ô∏è  Impossible de se connecter √† Radarr (v√©rifiez l'\''URL et la cl√© API)')
    exit(1)
" 2>/dev/null; then
            :
        else
            :
        fi
    fi
    
    # Configuration des actions automatiques
    echo ""
    read -p "ü§ñ Activer les actions automatiques (relance/suppression) ? [Y/n] : " AUTO_ACTIONS
    AUTO_ACTIONS=${AUTO_ACTIONS:-Y}
    
    # Mise √† jour du fichier de configuration
    echo "üìù Mise √† jour de la configuration..."
    
    if [[ $ENABLE_SONARR =~ ^[Yy]$ ]]; then
        sed -i.bak1 "s|url: \"http://localhost:8989\"|url: \"$SONARR_URL\"|" config/config.yaml.local
        sed -i.bak2 "s|api_key: \"your_sonarr_api_key\"|api_key: \"$SONARR_API\"|" config/config.yaml.local
    else
        sed -i.bak1 "/sonarr:/,/radarr:/ s|enabled: true|enabled: false|" config/config.yaml.local
    fi
    
    if [[ $ENABLE_RADARR =~ ^[Yy]$ ]]; then
        sed -i.bak3 "s|url: \"http://localhost:7878\"|url: \"$RADARR_URL\"|" config/config.yaml.local
        sed -i.bak4 "s|api_key: \"your_radarr_api_key\"|api_key: \"$RADARR_API\"|" config/config.yaml.local
    else
        sed -i.bak3 "/radarr:/,/monitoring:/ s|enabled: true|enabled: false|" config/config.yaml.local
    fi
    
    if [[ $AUTO_ACTIONS =~ ^[Nn]$ ]]; then
        sed -i.bak5 "s|auto_retry: true|auto_retry: false|" config/config.yaml.local
    fi
    
    rm -f config/config.yaml.local.bak*
    
    echo "‚úÖ Configuration cr√©√©e dans config/config.yaml.local"
    
    # Test automatique apr√®s configuration
    echo ""
    echo "üß™ Test automatique de l'installation..."
    if python arr-monitor.py --test --config config/config.yaml.local 2>/dev/null; then
        echo "‚úÖ Test r√©ussi - Installation fonctionnelle !"
    else
        echo "‚ö†Ô∏è  Test √©chou√© - V√©rifiez la configuration"
        echo "üí° Logs disponibles dans logs/arr-monitor.log"
    fi
else
    echo "‚úÖ Configuration locale existante pr√©serv√©e"
    echo "üí° Pour reconfigurer, supprimez config/config.yaml.local et relancez l'installation"
fi

echo ""
if [ "$IS_UPDATE" = true ]; then
    echo "‚úÖ Mise √† jour termin√©e avec succ√®s !"
    echo "üí° Votre configuration existante a √©t√© pr√©serv√©e"
else
    echo "‚úÖ Installation termin√©e avec succ√®s !"
fi
echo ""
echo "üéØ IMPORTANT : Toutes les commandes doivent √™tre ex√©cut√©es depuis le r√©pertoire d'installation :"
echo "   cd $INSTALL_DIR"
echo ""
echo "üìã Utilisation :"
echo "   cd $INSTALL_DIR"
echo "   source venv/bin/activate  # Optionnel si lien symbolique"
echo "   python arr-monitor.py --config config/config.yaml.local"
echo ""
echo "üìã Commandes utiles :"
echo "   # Test unique"
echo "   cd $INSTALL_DIR && python arr-monitor.py --test --config config/config.yaml.local"
echo ""
echo "   # Mode debug"
echo "   cd $INSTALL_DIR && python arr-monitor.py --debug --config config/config.yaml.local"
echo ""
echo "   # Simulation sans actions"
echo "   cd $INSTALL_DIR && python arr-monitor.py --dry-run --config config/config.yaml.local"
echo ""
echo "   # Voir les logs"
echo "   cd $INSTALL_DIR && tail -f logs/arr-monitor.log"
echo ""
echo "üìÅ Configuration : $INSTALL_DIR/config/config.yaml.local"
echo "üìù Logs : $INSTALL_DIR/logs/arr-monitor.log"
echo ""
echo "üîß Pour cr√©er un service syst√®me (optionnel) :"
echo ""
if [ "$FORCE_INSTALL" = true ]; then
    # Mode non-interactif pour --update - ne pas installer le service automatiquement
    INSTALL_SERVICE="N"
    echo "üìã Mode mise √† jour : service systemd non modifi√©"
else
    read -p "üõ†Ô∏è  Voulez-vous installer le service systemd ? [y/N] : " INSTALL_SERVICE
fi
INSTALL_SERVICE=${INSTALL_SERVICE:-N}

if [[ $INSTALL_SERVICE =~ ^[Yy]$ ]]; then
    # V√©rifier la disponibilit√© du fichier service
    SERVICE_FILE=""
    if [ -f "arr-monitor.service.tmp" ]; then
        SERVICE_FILE="arr-monitor.service.tmp"
    fi
    
    if [ -n "$SERVICE_FILE" ]; then
        echo "üìã Installation du service systemd..."
        
        # V√©rifier que l'environnement virtuel fonctionne
        VENV_PYTHON_PATH=""
        
        # D√©terminer le chemin Python √† utiliser
        if [ -L "$INSTALL_DIR/venv" ]; then
            # Si c'est un lien symbolique, r√©soudre le chemin r√©el
            REAL_VENV_PATH=$(readlink -f "$INSTALL_DIR/venv")
            VENV_PYTHON_PATH="$REAL_VENV_PATH/bin/python"
            echo "üîó Utilisation du venv li√©: $REAL_VENV_PATH"
        elif [ -d "$INSTALL_DIR/venv" ]; then
            # Si c'est un r√©pertoire normal
            VENV_PYTHON_PATH="$INSTALL_DIR/venv/bin/python"
            echo "üìÅ Utilisation du venv local: $INSTALL_DIR/venv"
        else
            echo "‚ùå Aucun environnement virtuel trouv√©"
            exit 1
        fi
        
        if ! "$VENV_PYTHON_PATH" -c "import yaml, requests" &> /dev/null; then
            echo "‚ö†Ô∏è  Probl√®me avec l'environnement virtuel, r√©installation des d√©pendances..."
            if [ -L "$INSTALL_DIR/venv" ]; then
                # Pour un lien symbolique, installer dans le venv original
                REAL_VENV_PATH=$(readlink -f "$INSTALL_DIR/venv")
                "$REAL_VENV_PATH/bin/pip" install -r requirements.txt
            else
                # Pour un venv local, activer et installer
                source venv/bin/activate
                pip install -r requirements.txt
            fi
        fi
        
        # Copie et modification du fichier service avec chemin absolu
        cp "$SERVICE_FILE" arr-monitor.service.final
        sed -i.bak "s|%USER%|$USER|g" arr-monitor.service.final
        sed -i.bak2 "s|%INSTALL_DIR%|$INSTALL_DIR|g" arr-monitor.service.final
        
        # Installation du service
        sudo cp arr-monitor.service.final /etc/systemd/system/arr-monitor.service
        sudo systemctl daemon-reload
        sudo systemctl enable arr-monitor
        
        # Nettoyer les fichiers temporaires
        rm -f arr-monitor.service.final*
        rm -f arr-monitor.service.tmp
        
        echo "‚úÖ Service systemd install√© et activ√©"
        echo "   sudo systemctl start arr-monitor    # D√©marrer"
        echo "   sudo systemctl status arr-monitor   # V√©rifier le statut"
        echo "   sudo journalctl -u arr-monitor -f   # Voir les logs"
        
        # Test du service
        echo ""
        echo "üß™ Test du service systemd..."
        if sudo systemctl start arr-monitor && sleep 2 && sudo systemctl is-active --quiet arr-monitor; then
            echo "‚úÖ Service d√©marr√© avec succ√®s"
        else
            echo "‚ö†Ô∏è  Probl√®me de d√©marrage du service"
            echo "üìã V√©rification des logs :"
            sudo journalctl -u arr-monitor -n 10 --no-pager
        fi
    else
        echo "‚ö†Ô∏è  Fichier service non disponible"
        echo "üí° Vous pouvez cr√©er le service manuellement avec les instructions ci-dessous"
    fi
else
    echo "üìã Service systemd non install√©"
    echo ""
    echo "üí° Pour installer le service plus tard :"
    echo "   cd $INSTALL_DIR"
    echo "   sudo cp arr-monitor.service /etc/systemd/system/"
    echo "   sudo sed -i 's/%USER%/$USER/g' /etc/systemd/system/arr-monitor.service"
    echo "   sudo sed -i 's|%INSTALL_DIR%|$INSTALL_DIR|g' /etc/systemd/system/arr-monitor.service"
    echo "   sudo systemctl daemon-reload"
    echo "   sudo systemctl enable arr-monitor"
    echo "   sudo systemctl start arr-monitor"
fi

echo ""
echo "üéâ Installation termin√©e !"
echo ""
echo "üìñ Consultez le README.md pour plus d'informations et la documentation compl√®te"
